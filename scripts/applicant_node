#!/usr/bin/env python3
import rospy
from std_srvs.srv import Empty, EmptyResponse
from std_msgs.msg import String

from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash
from ipfs_common.ipfs_rosbag import IpfsRosBag
from robonomics_msgs.msg import Demand, Offer

from uru_server import DBHelper, ipfs_upload_str

class ApplicantNode:
    def __init__(self):
        rospy.init_node("applicant")
        rospy.loginfo("Launching applicant node...")

        rospy.wait_for_service("/eth/current_block")
        rospy.wait_for_service("/eth/accounts")
        self.accounts = rospy.ServiceProxy("/eth/accounts", Accounts)()
        rospy.loginfo(str(self.accounts))  # AIRA ethereum addresses

        self.MODEL = rospy.get_param("~model")
        self.TOKEN = rospy.get_param("~token")
        self.LIGHTHOUSE = rospy.get_param("/liability/infochan/ipfs_channel/lighthouse_contract")

        self.signing_demand = rospy.Publisher("/liability/infochan/eth/signing/demand", Demand, queue_size=128)
        rospy.Subscriber("/liability/infochan/incoming/offer", Offer, self.incoming_offer)

        rospy.Service("publish_free_demand", Empty, self.call_service)

        self.db_helper = DBHelper(rospy.get_param("~db_url")[:-1])

        rospy.loginfo("Applicant node is launched!")

    def call_service(self, req: Empty):
        self.publish_demand(UInt256("0"))

        return EmptyResponse()

    def incoming_offer(self, offer: Offer):
        rospy.loginfo("Incoming offer [{}]".format(offer.model.multihash))

        if offer.model.multihash == self.MODEL and offer.token.address == self.TOKEN:
            # the offer is for me
            if offer.cost > 0:
                # At the moment I accept any price
                rospy.loginfo("Accepting price: {}".format(offer.cost.uint256))
                self.publish_demand(offer.cost, objective=offer.objective)

    def create_objective(self) -> Multihash:
        # data_hash = ipfs["Hash"]
        rospy.loginfo("Creating objective...")

        # collect rows from last row until end
        data_str = self.db_helper.collect_data()
        rospy.loginfo("Result data length is {}".format(len(data_str)))

        # publish to ipfs
        data_hash = ipfs_upload_str(data_str)

        description = "Uruguay Demo"

        topics = {
                "/email": [ String( rospy.get_param("~email") ) ],
                "/info": [ String( description ) ],
                "/meta": [ String( data_hash ) ],
                "/images": [ String("") ]
                }
        rospy.loginfo(topics)
        bag = IpfsRosBag(messages=topics)
        return bag.multihash

    def make_deadline(self) -> UInt256:
        lifetime = int(rospy.get_param("~order_lifetime"))
        deadline = rospy.ServiceProxy("/eth/current_block", BlockNumber)().number + lifetime
        return UInt256(str(deadline))

    def publish_demand(self, cost: UInt256, objective: Multihash = None):
        rospy.loginfo("Publishing demand with cost {} and objective {}".format(cost, objective))
        demand = Demand()
        demand.model = Multihash(self.MODEL)
        if objective is not None:
            demand.objective = objective
        else:
            demand.objective = self.create_objective()
        demand.token = Address(self.TOKEN)
        demand.lighthouse = Address(self.LIGHTHOUSE)
        demand.cost = cost
        demand.validatorFee = UInt256("0")
        demand.validator = Address(rospy.get_param("~validator"))
        demand.deadline = self.make_deadline()

        self.signing_demand.publish(demand)

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    ApplicantNode().spin()

